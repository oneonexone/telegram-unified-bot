from telethon import TelegramClient, events
from telethon.errors import FloodWaitError
import asyncio
import json
import os
import sys
import argparse
import random

def set_terminal_color():
    """–ú–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –Ω–∞ –∑–µ–ª–µ–Ω—ã–π (Windows)"""
    try:
        if os.name == 'nt':  # Windows
            os.system('color c')  # –ó–µ–ª–µ–Ω—ã–π –Ω–∞ —á–µ—Ä–Ω–æ–º
        else:  # Linux/Mac
            print('\033[32m')  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
    except:
        pass  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –Ω–µ –±–µ–¥–∞

def load_config(config_path='config.json'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '{config_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ JSON —Ñ–∞–π–ª–µ: {e}")
        sys.exit(1)

async def run_bot(config):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    api_id = config.get('api_id')
    api_hash = config.get('api_hash')
    phone_number = config.get('phone_number')
    
    if not all([api_id, api_hash, phone_number]):
        print("‚ùå –û—à–∏–±–∫–∞: api_id, api_hash, phone_number –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")
        sys.exit(1)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    send_enabled = config.get('send_enabled', False)
    target_chat = config.get('target_chat')
    message_text = config.get('message')
    message_file = config.get('message_file')
    interval_seconds = config.get('interval_seconds', 3600)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö
    forward_enabled = config.get('forward_enabled', False)
    forward_to = config.get('forward_to')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–¥–∏–Ω —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏)
    messages_list = []
    
    if message_file:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º - —ç—Ç–æ —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞?
        if os.path.isdir(message_file):
            # –≠—Ç–æ –ø–∞–ø–∫–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ .txt —Ñ–∞–π–ª—ã
            try:
                txt_files = sorted([f for f in os.listdir(message_file) if f.endswith('.txt')])
                for txt_file in txt_files:
                    file_path = os.path.join(message_file, txt_file)
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read().strip()
                        if content:
                            messages_list.append(content)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages_list)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ '{message_file}'")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ '{message_file}': {e}")
        else:
            # –≠—Ç–æ —Ñ–∞–π–ª - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
            try:
                with open(message_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if content:
                        messages_list.append(content)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ '{message_file}': {e}")
    elif message_text:
        messages_list.append(message_text)
    
    # –†–µ–∂–∏–º —Ä–æ—Ç–∞—Ü–∏–∏
    rotation_mode = config.get('rotation_mode', 'sequential')  # sequential –∏–ª–∏ random
    current_message_index = 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–æ–≤
    if not send_enabled and not forward_enabled:
        print("‚ùå –í–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∂–∏–º: send_enabled –∏–ª–∏ forward_enabled")
        sys.exit(1)
    
    if send_enabled and not all([target_chat, (message_text or messages_list)]):
        print("‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω—É–∂–Ω—ã: target_chat –∏ message (–∏–ª–∏ message_file)")
        sys.exit(1)
    
    if forward_enabled and not forward_to:
        print("‚ùå –î–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω—É–∂–µ–Ω: forward_to")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    session_name = config.get('session_name', 'session')
    client = TelegramClient(
        session_name, 
        api_id, 
        api_hash,
        connection_retries=5,  # –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        retry_delay=3,  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        timeout=30,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        auto_reconnect=True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ë–ï–ó –ü–†–û–ß–¢–ï–ù–ò–Ø!)
    if forward_enabled:
        @client.on(events.NewMessage(incoming=True))
        async def forward_handler(event):
            """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ù–ê–ü–†–Ø–ú–£–Æ –ë–ï–ó –æ—Ç–º–µ—Ç–∫–∏ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏"""
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ - –¢–û–õ–¨–ö–û –õ–°!
            if event.is_group or event.is_channel:
                return
            
            try:
                sender = await event.get_sender()
                chat = await event.get_chat()
                
                sender_name = getattr(sender, 'first_name', 'Unknown')
                sender_username = getattr(sender, 'username', None)
                chat_title = getattr(chat, 'title', sender_name)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                header = f"üì® –û—Ç: {sender_name}"
                if sender_username:
                    header += f" (@{sender_username})"
                header += "\n"
                
                if hasattr(chat, 'title'):
                    header += f"üí¨ –ß–∞—Ç: {chat_title}\n"
                
                header += f"{'='*40}\n"
                
                # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                message_content = event.message.text or "[–ú–µ–¥–∏–∞/–°—Ç–∏–∫–µ—Ä/–§–∞–π–ª]"
                full_message = header + message_content
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–ê–ü–†–Ø–ú–£–Æ (–Ω–µ –ø–æ–º–µ—á–∞—è –∏—Å—Ö–æ–¥–Ω–æ–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ)
                await client.send_message(forward_to, full_message)
                
                print(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç {sender_name}")
                
            except FloodWaitError as e:
                print(f"‚è≥ FloodWait: –∂–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π...")
                await asyncio.sleep(e.seconds)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
    
    # –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    async def send_periodically():
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
        if not send_enabled:
            return
        
        nonlocal current_message_index
        current_interval = interval_seconds
        
        while True:
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                if messages_list:
                    if rotation_mode == 'random':
                        current_text = random.choice(messages_list)
                        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑ {len(messages_list)}) –≤ '{target_chat}'...")
                    else:  # sequential
                        current_text = messages_list[current_message_index]
                        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ({current_message_index + 1}/{len(messages_list)}) –≤ '{target_chat}'...")
                        current_message_index = (current_message_index + 1) % len(messages_list)
                else:
                    current_text = message_text
                    print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ '{target_chat}'...")
                
                await client.send_message(target_chat, current_text)
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ {current_interval} —Å–µ–∫.")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                current_interval = interval_seconds
                await asyncio.sleep(current_interval)
                
            except FloodWaitError as e:
                # Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å - –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                wait_time = e.seconds
                print(f"‚è≥ FloodWait: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_time} —Å–µ–∫—É–Ω–¥...")
                print(f"üîÑ –ê–¥–∞–ø—Ç–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval_seconds} ‚Üí {wait_time + 60} —Å–µ–∫")
                
                current_interval = wait_time + 60  # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä 60 —Å–µ–∫
                await asyncio.sleep(wait_time)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                await asyncio.sleep(current_interval)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        await client.start(phone=phone_number)
        me = await client.get_me()
        
        print("="*60)
        print("ü§ñ Unified Telegram Bot")
        print("="*60)
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
        print(f"üë§ –ê–∫–∫–∞—É–Ω—Ç: {me.first_name} (@{me.username})")
        print()
        
        if send_enabled:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞: –í–ö–õ–Æ–ß–ï–ù–ê ‚Üí {target_chat} (–∫–∞–∂–¥—ã–µ {interval_seconds} —Å–µ–∫)")
        else:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞: –í–´–ö–õ–Æ–ß–ï–ù–ê")
        
        if forward_enabled:
            print(f"üì¨ –ü–µ—Ä–µ—Å—ã–ª–∫–∞: –í–ö–õ–Æ–ß–ï–ù–ê ‚Üí {forward_to} (–Ω–∞–ø—Ä—è–º—É—é)")
        else:
            print(f"üì¨ –ü–µ—Ä–µ—Å—ã–ª–∫–∞: –í–´–ö–õ–Æ–ß–ï–ù–ê")
        
        print()
        print("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("="*60)
        print()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        
        if send_enabled:
            tasks.append(asyncio.create_task(send_periodically()))
        
        if forward_enabled:
            # –§–æ—Ä–≤–∞—Ä–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ events, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
            tasks.append(asyncio.create_task(client.run_until_disconnected()))
        else:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫–∞, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –∑–∞–¥–∞—á—É
            if tasks:
                await tasks[0]
        
        # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
        if len(tasks) > 1:
            await asyncio.gather(*tasks)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()
        print("üëã –û—Ç–∫–ª—é—á–µ–Ω–æ")

def main():
    parser = argparse.ArgumentParser(description='Unified Telegram Bot')
    parser.add_argument('--config', default='config.json', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É')
    args = parser.parse_args()
    
    # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    set_terminal_color()
    
    config = load_config(args.config)
    asyncio.run(run_bot(config))

if __name__ == "__main__":
    main()
